const ApplyRoles = <const>[
    "dragclick",
    "16cps",
    "eagle",
    "witchly",
    "breezily",
    "goodpvp",
    "moonwalk",
    "god",
    "diagod",
    "telly",
    "0cpsgod"
];

type ApplyRole = (typeof ApplyRoles)[number];

function isApplyRole(role: string): role is ApplyRole {
    return ApplyRoles.includes(role as ApplyRole);
}

const prodConfig = {
    // production config
    LevelRoles: [
        { level: 10, id: "0" },
        { level: 20, id: "0" },
        { level: 30, id: "0" },
        { level: 40, id: "0" },
        { level: 50, id: "0" },
        { level: 60, id: "0" },
        { level: 70, id: "0" },
        { level: 80, id: "0" },
        { level: 90, id: "0" },
        { level: 100, id: "0" }
    ],
    AllowedRolesCommand: [
        "0",
        "0"
    ],
    NoXPRole: "0",
    NoXPChannels: [
        "0" // counting
    ],
    QuickTimeChannels: [
        "0" // English chat
    ],
    Channels: {
        Birthday: "0",
        Levelup: "0",
        Applications: "0",
        Guide: "0",
        GuideMessage: "0",
        Outcome: "0",
        ToReview: "0",
        PackComments: "0",
        Questions: "0",
        Clutches: "0"
    },
    Roles: {
        Birthday: "0",
        Chatbot: "0"
    },
    RoleToName: {
        dragclick: "Drag clicker",
        "16cps": "16+ CPS",
        eagle: "Eagle Bridger",
        witchly: "Witchly Bridger",
        breezily: "Breezily Bridger",
        goodpvp: "Good PvPer",
        moonwalk: "Moonwalker",
        god: "Godbridger",
        diagod: "Diagonal Godbridger",
        telly: "Telly Bridger",
        "0cpsgod": "0 CPS Godbridger"
    } as { [key in ApplyRole]: string },
    RoleToID: {
        dragclick: "0",
        "16cps": "0",
        eagle: "0",
        witchly: "0",
        breezily: "0",
        goodpvp: "0",
        moonwalk: "0",
        god: "0",
        diagod: "0",
        telly: "0",
        "0cpsgod": "0"
    } as { [key in ApplyRole]: string },
    OAuthRedirect: "/api/callback",
    DashOrigin: "https://example.com"
};

// development config, useful for testing
const devConfig = {
    ...prodConfig,
    LevelRoles: [
        { level: 10, id: "0" },
        { level: 20, id: "0" },
        { level: 30, id: "0" },
        { level: 40, id: "0" },
        { level: 50, id: "0" },
        { level: 60, id: "0" },
        { level: 70, id: "0" },
        { level: 80, id: "0" },
        { level: 90, id: "0" },
        { level: 100, id: "0" }
    ],
    AllowedRolesCommand: [
        "0"
    ],
    Channels: {
        Birthday: "0",
        Levelup: "0",
        Applications: "0",
        Guide: "0",
        GuideMessage: "0",
        Outcome: "0",
        ToReview: "0",
        PackComments: "0",
        Questions: "0",
        Clutches: "0"
    },
    Roles: {
        Birthday: "0",
        Chatbot: "0"
    },
    RoleToID: {
        dragclick: "0",
        "16cps": "0",
        eagle: "0",
        witchly: "0",
        breezily: "0",
        goodpvp: "0",
        moonwalk: "0",
        god: "0",
        diagod: "0",
        telly: "0",
        "0cpsgod": "0"
    } as { [key in ApplyRole]: string },
    OAuthRedirect: "/api/callback",
    DashOrigin: "http://example.test"
};

export default process.env.NODE_ENV === "production" ? prodConfig : devConfig;

export { type ApplyRole, isApplyRole };
